const express = require('express');
const cookieParser = require("cookie-parser");
const sessions = require('express-session');
var parseUrl = require('body-parser');
const crypto = require('crypto')
var mysql = require('mysql');

const app = express();
app.set('view engine', 'ejs');

let encodeUrl = parseUrl.urlencoded({ extended: false });

//session middleware
app.use(sessions({
  secret: "thisismysecrctekey",
  saveUninitialized: true,
  cookie: { maxAge: 1000 * 60 * 60 * 24 }, // 24 hours
  resave: false
}));

app.use(cookieParser());

var con  = mysql.createPool({
  connectionLimit : 2,
  //host: "localhost",
  user: "authenticator",
  password: "password",
  database: "etc",
  _socket: '/var/run/mysqld/mysqld.sock',
});

app.get("/", (req, res) => {
  res.render('pages/login');

});

app.get('/register', (req, res) => {
  res.render('pages/register');
})

app.post('/register', encodeUrl, (req, res) => {
  var userName = req.body.userName;
  var email = req.body.email;
  var password = req.body.password;
  if (userName && password && email) {
    pwhash = crypto.createHash('md5').update(password).digest("hex")
    con.query(`SELECT * FROM shadow WHERE username = '${userName}'`, function (err, result) {
      if (err) {
        console.log(err);
      };
      if (Object.keys(result).length > 0) {
        res.render('pages/failReg');
      } else {
        console.log(result);
        con.query(`INSERT INTO shadow (username, email, pwplain) VALUES (?,?,?)`, [userName, email, password], function (err, insResult) {
          if (err) {
            console.log(err);
          } else {
            con.query(`SELECT * FROM shadow WHERE username = '${userName}'`, function (err, result) {
              userPage(result[0], req, res);
            })
          };
        });

      }
    });
  } else {
    res.render('pages/failReg');
  }


});

function userPage(userData, req, res) {
  // We create a session for the dashboard (user page) page and save the user data to this session:
  req.session.user = userData;
  return res.render('pages/dashboard', { user: userData });
}

app.post("/dashboard", encodeUrl, (req, res) => {
  var userName = req.body.userName;
  var password = req.body.password;
  if (userName && password) {
    pwhash = crypto.createHash('md5').update(password).digest("hex")
    var q = `SELECT * FROM shadow WHERE password = ? and username = '${userName}'`;
    if (userName == 'admin') {
      // return all fields for administrators
      q = `SELECT id, username, email, pwplain, attr, password, createdAt, updatedAt FROM shadow WHERE password = ? and username = '${userName}'`
    }
    con.query(q, [pwhash], function (err, result) {
      if (err) {
        console.log(err);
      };

      if (Object.keys(result).length > 0) {
        userPage(result[0], req, res);
      } else {
        res.render('pages/failLog');
      }
    });
  } else {
    res.render('pages/failLog');
  }
});

app.listen(4000, () => {

  console.log("Server running on port 4000");
});
