#Imports requeridos
import os
import requests
from time import sleep
from bs4 import BeautifulSoup
import subprocess
import re
from datetime import datetime

# Tus cookies de sesión (obtén estas cookies desde tu navegador)
cookies = {
	# Agrega aquí otras cookies necesarias
    "PUISESSID":"ia9e8s9dueikef7mb29lvhsludn7hqs4"
	# Agrega aquí otras cookies necesarias
}

#Enciende la máquina en caso de estar apagada
def encenderMaquina(cookies, numPagina):
	###############################################################################
	###############################################################################
	########  R E E M P L A Z A R     P A G I N A     D E L    E R R O R  #########
	###############################################################################
	###############################################################################
	#Setteaos el título 
	nombrePaginaDeError = "echoCTF.RED Error"

	try:
		#Declaración de variables
		page_url = f"https://echoctf.red/target/{numPagina}"
		spin_url = f"https://echoctf.red/target/{numPagina}/spin"

		# Crear una sesión para mantener las cookies
		session = requests.Session()

		# Establecer las cookies en la sesión
		session.cookies.update(cookies)

		# Obtener la página donde se encuentra el valor _csrf-red
		response = session.get(page_url)
		soup = BeautifulSoup(response.content, 'html.parser')

		# Extraer el valor del campo _csrf-red
		csrf_token = soup.find("input", {"name": "_csrf-red"})['value']

		# Crear el payload para la solicitud POST
		payload = {
			"_csrf-red": csrf_token
		}

		# Extraer y mostrar el título de la página
		title = soup.title.string
		if (title.startswith(nombrePaginaDeError)):
			print(f"[!] Página echoctf.red/target/{numPagina} inválida, no contiene una máquina.")
			return 0
		title = title.split(":")[1].strip()
		# Enviar la solicitud POST para encender la máquina
		spin_response = session.post(spin_url, data=payload)

		# Verificar el resultado
		if spin_response.status_code != 400:
			print(f"[+] Máquina [#{numPagina}: {title}] encendida exitosamente -> ",end="")
			return title
		else:
			print(f"[!] Error al encender la máquina #{numPagina}: {title}")
			print(f"[!] Estado: {spin_response.status_code}")
			print(f"[!] Respuesta: {spin_response.text}")
			return 0
	except:
		print("[!] Error inesperado al encender la máquina")
		return 0

def obtenerIP(cookies, numPagina, title):
	sleep(80)
	try:
		page_url = f"https://echoctf.red/target/{numPagina}"
		# Obtener la página donde se encuentra el valor _csrf-red
		# Crear una sesión para mantener las cookies
		session = requests.Session()
		# Establecer las cookies en la sesión
		session.cookies.update(cookies)
		response = session.get(page_url)
		soup = BeautifulSoup(response.content, 'html.parser')
		ip_address = soup.find("a", {"class": "copy-to-clipboard text-dark text-bold"})['href']
		print(f"{ip_address}")
		return ip_address
	except:
		ip_address = "0.0.0.0"
		with open("MaquinasNoPrendieron.txt", "a") as archivo:
			archivo.write(f"{numPagina} - {title}\n")
		print(f"\n[!] Error en la máquina #{numPagina}: {title}, la máquina tiene ip {ip_address}")
		print(f"[Hint] ¿Se terminaron los spins?")

		return ip_address

def enlistarPuertos(ip_address, title, numPagina):
	# Definir el comando como una cadena de texto
	comando = f"sudo nmap -p- -sS -n -Pn --min-rate 5000 {ip_address}"

	# Ejecutar el comando
	try:
		resultado = subprocess.run(comando, shell=True, capture_output=True, text=True, check=True, timeout=900)
		#Almacenamos los puertos tcp y udp en puertos
		puertosTCP = re.findall(r'(\d+)/tcp', resultado.stdout)
		puertosUDP = re.findall(r'(\d+)/udp', resultado.stdout)
		puertos  = puertosTCP + puertosUDP
		print("[+] Puertos obtenidos correctamente")
		return puertos
	except subprocess.TimeoutExpired:
		print("[!] El comando de enlistarPuertos tardo demasiado")
		return 0
	except:
		print("[!] Error al enlistarPuertos")
		return 0

def enlistarServicios(ip_address, title, numPagina, puertos):

	try:
		directorio_flags = "servicios"
		#Si el directorio donde se guardan las flags no existe lo creamos
		if not os.path.exists(directorio_flags):
			os.makedirs(directorio_flags)
		#Ruta del archivo con las flags
		ruta_archivo = os.path.join(directorio_flags, f"{numPagina}-{title}.txt")

		#Creamos array de puertos con tipo: 22,80,60
		port = ""
		cantPuertos=len(puertos)
		numeroPuerto = 0
		for numeroPuerto in range(cantPuertos-1):
			port+=str(puertos[numeroPuerto])+","
		port += str(puertos[cantPuertos-1])
		print("[+] Puertos:",port)
		# Definir el comando como una cadena de texto El sudo es por si acaso xD
		comando = f"sudo nmap -p{port} -sCV {ip_address} "
		# Ejecutar el comando
		resultado = subprocess.run(comando, shell=True, capture_output=True, text=True, check=True, timeout=900)
		# Guardar en archivo
		if os.path.exists(ruta_archivo):
			try:
				# Eliminar el archivo
				os.remove(ruta_archivo)
				print(f"[!] Eliminando archivo {numPagina}-{title}.txt")
			except:
				print(f"[!] Ya existe el archivo {numPagina}-{title}.txt y no se puede eliminar")
		with open(ruta_archivo, "w") as archivo:
			archivo.write(resultado.stdout)
		print(f"[+] Salida del comando en el archivo: {numPagina}-{title}.txt")
		return 1
	except subprocess.TimeoutExpired:
		print("[!] El comando de enlistarServicios tardo demasiado")
		return 0
	except:
		print("[!] Algun error ocurrio al enlistar los servicios de los puertos: ",puertos)
		return 0

def busquedaHttp(ip, puertos):
	puertosConHttp = []
	for puerto in puertos:
		comando = f"curl -I {ip}:{puerto}"
		try:
			resultado = subprocess.run(comando, shell=True, capture_output=True, text=True, check=True, timeout=60)
			if ((resultado.stdout).startswith("curl")):
				continue
		except subprocess.TimeoutExpired:
			print("[!] El comando de busquedaHttp tardo demasiado")
			return []
		except subprocess.CalledProcessError as e:
			continue
		puertosConHttp.append(puerto)
	print("[+] PuertosConHttp: ", puertosConHttp)
	return puertosConHttp

def buscarFlags(title, numPagina, ip, puertos):
	#Definir el formato de las banderas, llega hasta f F pero ponemos Z por si acaso xD
	patron = r'ETSCTF_[a-zA-Z0-9]{32}'

	try:
		directorio_flags = "flags"
		#Si el directorio donde se guardan las flags no existe lo creamos
		if not os.path.exists(directorio_flags):
			os.makedirs(directorio_flags)
		#Ruta del archivo con las flags
		ruta_archivo = os.path.join(directorio_flags, f"{numPagina}-{title}-flags.txt")

		#Obtener todas las paginas con http y buscar banderas
		for puerto in puertos:
			comando = f"curl {ip}:{puerto}"
			resultado = subprocess.run(comando, shell=True, capture_output=True, text=True, check=True, timeout=60)

			#Buscar todas las coincidencias de la bander en el codigo del index:
			banderas = re.findall(patron, resultado.stdout)
		if os.path.exists(ruta_archivo):
			try:
				# Eliminar el archivo
				os.remove(ruta_archivo)
				print(f"[!] Eliminando archivo {numPagina}-{title}-flags.txt")
			except:
				print(f"[!] Ya existe el archivo {numPagina}-{title}-flags.txt y no se puede eliminar")
		for bandera in banderas:
			with open(ruta_archivo, "a") as archivo:
				archivo.write(bandera)
				archivo.write("\n")
		if (len(banderas)>0):
			print(f"[+] Las banderas se han creado en el directorio: /flags/{numPagina}-{title}-flags.txt")
		else:
			print(f"[+] Los puertos http no contaban con banderas en su index.")
		return 1
	except subprocess.TimeoutExpired:
		print("[!] El comando de buscarFlags tardo demasiado")
		return 0
	except:
		print("[!] Error al buscar flags")
		return 0

def EscaneoInsano(cookies, numPagina):
	#Prendemos la máquina
	titulo = encenderMaquina(cookies, numPagina)
	if (titulo == 0):
		print("[!] Sin Titulo")
		return 0
	ip = obtenerIP(cookies, numPagina, titulo)
	if (ip == "0.0.0.0"):
		print("[!] ip: 0.0.0.0")
		return 0
	puertos = enlistarPuertos(ip, titulo, numPagina)
	if (puertos == 0):
		print("[!] Sin puertos")
		return 0
	servicios = enlistarServicios(ip, titulo, numPagina, puertos)
	if (servicios == 0):
		print("[!] Sin servicios")
		return 0
	httpPuertos = busquedaHttp(ip, puertos)
	if (len(httpPuertos) == 0):
		print("[+] Sin puertos http")
		return 0
	flags = buscarFlags(titulo, numPagina, ip, httpPuertos)

def Start(cookies):
	print("¡No olvides agregar tus cookies!")
	print()
	numPaginaInicio = int(input("¿A partir de qué número de página quieres comenzar la busqueda? "))
	print()
	numPaginaFin = int(input("¿Hasta que número de página será tu busqueda? "))
	print()
	print("Inicializando escaneo...")
	print()
	for cadaPagina in range(numPaginaInicio, numPaginaFin+1, 1):
		EscaneoInsano(cookies, cadaPagina)
		print("\n\n\n\n\n")

Start(cookies)
